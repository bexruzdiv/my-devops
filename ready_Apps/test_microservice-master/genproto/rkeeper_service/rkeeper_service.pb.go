// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: rkeeper_service.proto

package rkeeper_service

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId        string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	RkeeperOrderId string `protobuf:"bytes,2,opt,name=rkeeper_order_id,json=rkeeperOrderId,proto3" json:"rkeeper_order_id,omitempty"`
	ShipperId      string `protobuf:"bytes,3,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
	BranchId       string `protobuf:"bytes,4,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkeeper_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rkeeper_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_rkeeper_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *CreateRequest) GetRkeeperOrderId() string {
	if x != nil {
		return x.RkeeperOrderId
	}
	return ""
}

func (x *CreateRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

func (x *CreateRequest) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

type SaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RkeeperOrderId string `protobuf:"bytes,1,opt,name=rkeeper_order_id,json=rkeeperOrderId,proto3" json:"rkeeper_order_id,omitempty"`
	OrderId        string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	ShipperId      string `protobuf:"bytes,3,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
}

func (x *SaveRequest) Reset() {
	*x = SaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkeeper_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveRequest) ProtoMessage() {}

func (x *SaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rkeeper_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveRequest.ProtoReflect.Descriptor instead.
func (*SaveRequest) Descriptor() ([]byte, []int) {
	return file_rkeeper_service_proto_rawDescGZIP(), []int{1}
}

func (x *SaveRequest) GetRkeeperOrderId() string {
	if x != nil {
		return x.RkeeperOrderId
	}
	return ""
}

func (x *SaveRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *SaveRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

type SaveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RkeeperOrderId string `protobuf:"bytes,1,opt,name=rkeeper_order_id,json=rkeeperOrderId,proto3" json:"rkeeper_order_id,omitempty"`
}

func (x *SaveResponse) Reset() {
	*x = SaveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkeeper_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveResponse) ProtoMessage() {}

func (x *SaveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rkeeper_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveResponse.ProtoReflect.Descriptor instead.
func (*SaveResponse) Descriptor() ([]byte, []int) {
	return file_rkeeper_service_proto_rawDescGZIP(), []int{2}
}

func (x *SaveResponse) GetRkeeperOrderId() string {
	if x != nil {
		return x.RkeeperOrderId
	}
	return ""
}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RkeeperBranch *RkeeperBranch `protobuf:"bytes,1,opt,name=rkeeper_branch,json=rkeeperBranch,proto3" json:"rkeeper_branch,omitempty"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkeeper_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rkeeper_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_rkeeper_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateResponse) GetRkeeperBranch() *RkeeperBranch {
	if x != nil {
		return x.RkeeperBranch
	}
	return nil
}

type CreateRkeeperOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RkeeperOrder *RkeeperOrder `protobuf:"bytes,1,opt,name=rkeeper_order,json=rkeeperOrder,proto3" json:"rkeeper_order,omitempty"`
}

func (x *CreateRkeeperOrderResponse) Reset() {
	*x = CreateRkeeperOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkeeper_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRkeeperOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRkeeperOrderResponse) ProtoMessage() {}

func (x *CreateRkeeperOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rkeeper_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRkeeperOrderResponse.ProtoReflect.Descriptor instead.
func (*CreateRkeeperOrderResponse) Descriptor() ([]byte, []int) {
	return file_rkeeper_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateRkeeperOrderResponse) GetRkeeperOrder() *RkeeperOrder {
	if x != nil {
		return x.RkeeperOrder
	}
	return nil
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ShipperId string `protobuf:"bytes,2,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkeeper_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rkeeper_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_rkeeper_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

type GetAllRkeeperBranchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit     uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	ShipperId string `protobuf:"bytes,3,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
}

func (x *GetAllRkeeperBranchesRequest) Reset() {
	*x = GetAllRkeeperBranchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkeeper_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRkeeperBranchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRkeeperBranchesRequest) ProtoMessage() {}

func (x *GetAllRkeeperBranchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rkeeper_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRkeeperBranchesRequest.ProtoReflect.Descriptor instead.
func (*GetAllRkeeperBranchesRequest) Descriptor() ([]byte, []int) {
	return file_rkeeper_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetAllRkeeperBranchesRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAllRkeeperBranchesRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAllRkeeperBranchesRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

type GetAllRkeeperBranchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RkeeperBranches []*RkeeperBranch `protobuf:"bytes,1,rep,name=rkeeper_branches,json=rkeeperBranches,proto3" json:"rkeeper_branches,omitempty"`
	Count           uint64           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetAllRkeeperBranchesResponse) Reset() {
	*x = GetAllRkeeperBranchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkeeper_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRkeeperBranchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRkeeperBranchesResponse) ProtoMessage() {}

func (x *GetAllRkeeperBranchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rkeeper_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRkeeperBranchesResponse.ProtoReflect.Descriptor instead.
func (*GetAllRkeeperBranchesResponse) Descriptor() ([]byte, []int) {
	return file_rkeeper_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetAllRkeeperBranchesResponse) GetRkeeperBranches() []*RkeeperBranch {
	if x != nil {
		return x.RkeeperBranches
	}
	return nil
}

func (x *GetAllRkeeperBranchesResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetRkeeperBranchMenuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Menu `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Count uint64  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetRkeeperBranchMenuResponse) Reset() {
	*x = GetRkeeperBranchMenuResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkeeper_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRkeeperBranchMenuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRkeeperBranchMenuResponse) ProtoMessage() {}

func (x *GetRkeeperBranchMenuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rkeeper_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRkeeperBranchMenuResponse.ProtoReflect.Descriptor instead.
func (*GetRkeeperBranchMenuResponse) Descriptor() ([]byte, []int) {
	return file_rkeeper_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetRkeeperBranchMenuResponse) GetItems() []*Menu {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GetRkeeperBranchMenuResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetRkeeperBranchMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit     uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	ShipperId string `protobuf:"bytes,3,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
	BranchId  string `protobuf:"bytes,4,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
}

func (x *GetRkeeperBranchMenuRequest) Reset() {
	*x = GetRkeeperBranchMenuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkeeper_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRkeeperBranchMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRkeeperBranchMenuRequest) ProtoMessage() {}

func (x *GetRkeeperBranchMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rkeeper_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRkeeperBranchMenuRequest.ProtoReflect.Descriptor instead.
func (*GetRkeeperBranchMenuRequest) Descriptor() ([]byte, []int) {
	return file_rkeeper_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetRkeeperBranchMenuRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetRkeeperBranchMenuRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRkeeperBranchMenuRequest) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

func (x *GetRkeeperBranchMenuRequest) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

var File_rkeeper_service_proto protoreflect.FileDescriptor

var file_rkeeper_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x72, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d,
	0x72, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64,
	0x22, 0x71, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x0c, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x0e, 0x72, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x52, 0x0d, 0x72, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22,
	0x59, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0d, 0x72, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x6b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3b, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x79, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x6b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x10, 0x72, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x0f, 0x72, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x52, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4d,
	0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52,
	0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x32, 0xd1, 0x04,
	0x0a, 0x0e, 0x52, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x5a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x25, 0x2e, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4d, 0x65,
	0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x17, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x1a, 0x18, 0x2e, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52,
	0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x14, 0x2e, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x6b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x17,
	0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x1a, 0x18, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6b, 0x65,
	0x65, 0x70, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x14, 0x2e, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x17, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x1a, 0x5a, 0x18, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x6b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rkeeper_service_proto_rawDescOnce sync.Once
	file_rkeeper_service_proto_rawDescData = file_rkeeper_service_proto_rawDesc
)

func file_rkeeper_service_proto_rawDescGZIP() []byte {
	file_rkeeper_service_proto_rawDescOnce.Do(func() {
		file_rkeeper_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_rkeeper_service_proto_rawDescData)
	})
	return file_rkeeper_service_proto_rawDescData
}

var file_rkeeper_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_rkeeper_service_proto_goTypes = []interface{}{
	(*CreateRequest)(nil),                 // 0: genproto.CreateRequest
	(*SaveRequest)(nil),                   // 1: genproto.SaveRequest
	(*SaveResponse)(nil),                  // 2: genproto.SaveResponse
	(*CreateResponse)(nil),                // 3: genproto.CreateResponse
	(*CreateRkeeperOrderResponse)(nil),    // 4: genproto.CreateRkeeperOrderResponse
	(*GetRequest)(nil),                    // 5: genproto.GetRequest
	(*GetAllRkeeperBranchesRequest)(nil),  // 6: genproto.GetAllRkeeperBranchesRequest
	(*GetAllRkeeperBranchesResponse)(nil), // 7: genproto.GetAllRkeeperBranchesResponse
	(*GetRkeeperBranchMenuResponse)(nil),  // 8: genproto.GetRkeeperBranchMenuResponse
	(*GetRkeeperBranchMenuRequest)(nil),   // 9: genproto.GetRkeeperBranchMenuRequest
	(*RkeeperBranch)(nil),                 // 10: genproto.RkeeperBranch
	(*RkeeperOrder)(nil),                  // 11: genproto.RkeeperOrder
	(*Menu)(nil),                          // 12: genproto.Menu
	(*empty.Empty)(nil),                   // 13: google.protobuf.Empty
}
var file_rkeeper_service_proto_depIdxs = []int32{
	10, // 0: genproto.CreateResponse.rkeeper_branch:type_name -> genproto.RkeeperBranch
	11, // 1: genproto.CreateRkeeperOrderResponse.rkeeper_order:type_name -> genproto.RkeeperOrder
	10, // 2: genproto.GetAllRkeeperBranchesResponse.rkeeper_branches:type_name -> genproto.RkeeperBranch
	12, // 3: genproto.GetRkeeperBranchMenuResponse.items:type_name -> genproto.Menu
	9,  // 4: genproto.RkeeperService.GetMenu:input_type -> genproto.GetRkeeperBranchMenuRequest
	10, // 5: genproto.RkeeperService.CreateRkeeperBranch:input_type -> genproto.RkeeperBranch
	5,  // 6: genproto.RkeeperService.GetRkeeperBranch:input_type -> genproto.GetRequest
	6,  // 7: genproto.RkeeperService.GetRkeeperBranches:input_type -> genproto.GetAllRkeeperBranchesRequest
	10, // 8: genproto.RkeeperService.UpdateRkeeperBranch:input_type -> genproto.RkeeperBranch
	5,  // 9: genproto.RkeeperService.DeleteRkeeperBranch:input_type -> genproto.GetRequest
	0,  // 10: genproto.RkeeperService.CreateRkeeperOrder:input_type -> genproto.CreateRequest
	8,  // 11: genproto.RkeeperService.GetMenu:output_type -> genproto.GetRkeeperBranchMenuResponse
	3,  // 12: genproto.RkeeperService.CreateRkeeperBranch:output_type -> genproto.CreateResponse
	3,  // 13: genproto.RkeeperService.GetRkeeperBranch:output_type -> genproto.CreateResponse
	7,  // 14: genproto.RkeeperService.GetRkeeperBranches:output_type -> genproto.GetAllRkeeperBranchesResponse
	3,  // 15: genproto.RkeeperService.UpdateRkeeperBranch:output_type -> genproto.CreateResponse
	13, // 16: genproto.RkeeperService.DeleteRkeeperBranch:output_type -> google.protobuf.Empty
	4,  // 17: genproto.RkeeperService.CreateRkeeperOrder:output_type -> genproto.CreateRkeeperOrderResponse
	11, // [11:18] is the sub-list for method output_type
	4,  // [4:11] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_rkeeper_service_proto_init() }
func file_rkeeper_service_proto_init() {
	if File_rkeeper_service_proto != nil {
		return
	}
	file_rkeeper_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_rkeeper_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkeeper_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkeeper_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkeeper_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkeeper_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRkeeperOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkeeper_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkeeper_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllRkeeperBranchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkeeper_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllRkeeperBranchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkeeper_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRkeeperBranchMenuResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkeeper_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRkeeperBranchMenuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rkeeper_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rkeeper_service_proto_goTypes,
		DependencyIndexes: file_rkeeper_service_proto_depIdxs,
		MessageInfos:      file_rkeeper_service_proto_msgTypes,
	}.Build()
	File_rkeeper_service_proto = out.File
	file_rkeeper_service_proto_rawDesc = nil
	file_rkeeper_service_proto_goTypes = nil
	file_rkeeper_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RkeeperServiceClient is the client API for RkeeperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RkeeperServiceClient interface {
	GetMenu(ctx context.Context, in *GetRkeeperBranchMenuRequest, opts ...grpc.CallOption) (*GetRkeeperBranchMenuResponse, error)
	CreateRkeeperBranch(ctx context.Context, in *RkeeperBranch, opts ...grpc.CallOption) (*CreateResponse, error)
	GetRkeeperBranch(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	GetRkeeperBranches(ctx context.Context, in *GetAllRkeeperBranchesRequest, opts ...grpc.CallOption) (*GetAllRkeeperBranchesResponse, error)
	UpdateRkeeperBranch(ctx context.Context, in *RkeeperBranch, opts ...grpc.CallOption) (*CreateResponse, error)
	DeleteRkeeperBranch(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateRkeeperOrder(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateRkeeperOrderResponse, error)
}

type rkeeperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRkeeperServiceClient(cc grpc.ClientConnInterface) RkeeperServiceClient {
	return &rkeeperServiceClient{cc}
}

func (c *rkeeperServiceClient) GetMenu(ctx context.Context, in *GetRkeeperBranchMenuRequest, opts ...grpc.CallOption) (*GetRkeeperBranchMenuResponse, error) {
	out := new(GetRkeeperBranchMenuResponse)
	err := c.cc.Invoke(ctx, "/genproto.RkeeperService/GetMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkeeperServiceClient) CreateRkeeperBranch(ctx context.Context, in *RkeeperBranch, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/genproto.RkeeperService/CreateRkeeperBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkeeperServiceClient) GetRkeeperBranch(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/genproto.RkeeperService/GetRkeeperBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkeeperServiceClient) GetRkeeperBranches(ctx context.Context, in *GetAllRkeeperBranchesRequest, opts ...grpc.CallOption) (*GetAllRkeeperBranchesResponse, error) {
	out := new(GetAllRkeeperBranchesResponse)
	err := c.cc.Invoke(ctx, "/genproto.RkeeperService/GetRkeeperBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkeeperServiceClient) UpdateRkeeperBranch(ctx context.Context, in *RkeeperBranch, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/genproto.RkeeperService/UpdateRkeeperBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkeeperServiceClient) DeleteRkeeperBranch(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/genproto.RkeeperService/DeleteRkeeperBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rkeeperServiceClient) CreateRkeeperOrder(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateRkeeperOrderResponse, error) {
	out := new(CreateRkeeperOrderResponse)
	err := c.cc.Invoke(ctx, "/genproto.RkeeperService/CreateRkeeperOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RkeeperServiceServer is the server API for RkeeperService service.
type RkeeperServiceServer interface {
	GetMenu(context.Context, *GetRkeeperBranchMenuRequest) (*GetRkeeperBranchMenuResponse, error)
	CreateRkeeperBranch(context.Context, *RkeeperBranch) (*CreateResponse, error)
	GetRkeeperBranch(context.Context, *GetRequest) (*CreateResponse, error)
	GetRkeeperBranches(context.Context, *GetAllRkeeperBranchesRequest) (*GetAllRkeeperBranchesResponse, error)
	UpdateRkeeperBranch(context.Context, *RkeeperBranch) (*CreateResponse, error)
	DeleteRkeeperBranch(context.Context, *GetRequest) (*empty.Empty, error)
	CreateRkeeperOrder(context.Context, *CreateRequest) (*CreateRkeeperOrderResponse, error)
}

// UnimplementedRkeeperServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRkeeperServiceServer struct {
}

func (*UnimplementedRkeeperServiceServer) GetMenu(context.Context, *GetRkeeperBranchMenuRequest) (*GetRkeeperBranchMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (*UnimplementedRkeeperServiceServer) CreateRkeeperBranch(context.Context, *RkeeperBranch) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRkeeperBranch not implemented")
}
func (*UnimplementedRkeeperServiceServer) GetRkeeperBranch(context.Context, *GetRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRkeeperBranch not implemented")
}
func (*UnimplementedRkeeperServiceServer) GetRkeeperBranches(context.Context, *GetAllRkeeperBranchesRequest) (*GetAllRkeeperBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRkeeperBranches not implemented")
}
func (*UnimplementedRkeeperServiceServer) UpdateRkeeperBranch(context.Context, *RkeeperBranch) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRkeeperBranch not implemented")
}
func (*UnimplementedRkeeperServiceServer) DeleteRkeeperBranch(context.Context, *GetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRkeeperBranch not implemented")
}
func (*UnimplementedRkeeperServiceServer) CreateRkeeperOrder(context.Context, *CreateRequest) (*CreateRkeeperOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRkeeperOrder not implemented")
}

func RegisterRkeeperServiceServer(s *grpc.Server, srv RkeeperServiceServer) {
	s.RegisterService(&_RkeeperService_serviceDesc, srv)
}

func _RkeeperService_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRkeeperBranchMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkeeperServiceServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RkeeperService/GetMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkeeperServiceServer).GetMenu(ctx, req.(*GetRkeeperBranchMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkeeperService_CreateRkeeperBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RkeeperBranch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkeeperServiceServer).CreateRkeeperBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RkeeperService/CreateRkeeperBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkeeperServiceServer).CreateRkeeperBranch(ctx, req.(*RkeeperBranch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkeeperService_GetRkeeperBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkeeperServiceServer).GetRkeeperBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RkeeperService/GetRkeeperBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkeeperServiceServer).GetRkeeperBranch(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkeeperService_GetRkeeperBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRkeeperBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkeeperServiceServer).GetRkeeperBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RkeeperService/GetRkeeperBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkeeperServiceServer).GetRkeeperBranches(ctx, req.(*GetAllRkeeperBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkeeperService_UpdateRkeeperBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RkeeperBranch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkeeperServiceServer).UpdateRkeeperBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RkeeperService/UpdateRkeeperBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkeeperServiceServer).UpdateRkeeperBranch(ctx, req.(*RkeeperBranch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkeeperService_DeleteRkeeperBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkeeperServiceServer).DeleteRkeeperBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RkeeperService/DeleteRkeeperBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkeeperServiceServer).DeleteRkeeperBranch(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RkeeperService_CreateRkeeperOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RkeeperServiceServer).CreateRkeeperOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.RkeeperService/CreateRkeeperOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RkeeperServiceServer).CreateRkeeperOrder(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RkeeperService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.RkeeperService",
	HandlerType: (*RkeeperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMenu",
			Handler:    _RkeeperService_GetMenu_Handler,
		},
		{
			MethodName: "CreateRkeeperBranch",
			Handler:    _RkeeperService_CreateRkeeperBranch_Handler,
		},
		{
			MethodName: "GetRkeeperBranch",
			Handler:    _RkeeperService_GetRkeeperBranch_Handler,
		},
		{
			MethodName: "GetRkeeperBranches",
			Handler:    _RkeeperService_GetRkeeperBranches_Handler,
		},
		{
			MethodName: "UpdateRkeeperBranch",
			Handler:    _RkeeperService_UpdateRkeeperBranch_Handler,
		},
		{
			MethodName: "DeleteRkeeperBranch",
			Handler:    _RkeeperService_DeleteRkeeperBranch_Handler,
		},
		{
			MethodName: "CreateRkeeperOrder",
			Handler:    _RkeeperService_CreateRkeeperOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rkeeper_service.proto",
}
