// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: order.proto

package order_service

import (
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Long float32 `protobuf:"fixed32,1,opt,name=long,proto3" json:"long,omitempty"`
	Lat  float32 `protobuf:"fixed32,2,opt,name=lat,proto3" json:"lat,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{0}
}

func (x *Location) GetLong() float32 {
	if x != nil {
		return x.Long
	}
	return 0
}

func (x *Location) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

type StatusNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrderId     string                `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	StatusId    string                `protobuf:"bytes,3,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	Description *wrappers.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt   string                `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *StatusNote) Reset() {
	*x = StatusNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusNote) ProtoMessage() {}

func (x *StatusNote) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusNote.ProtoReflect.Descriptor instead.
func (*StatusNote) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{1}
}

func (x *StatusNote) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StatusNote) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *StatusNote) GetStatusId() string {
	if x != nil {
		return x.StatusId
	}
	return ""
}

func (x *StatusNote) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *StatusNote) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type Courier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Phone         string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	FirstName     string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName      string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	VehicleNumber string `protobuf:"bytes,5,opt,name=vehicle_number,json=vehicleNumber,proto3" json:"vehicle_number,omitempty"`
}

func (x *Courier) Reset() {
	*x = Courier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Courier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Courier) ProtoMessage() {}

func (x *Courier) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Courier.ProtoReflect.Descriptor instead.
func (*Courier) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{2}
}

func (x *Courier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Courier) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Courier) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Courier) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Courier) GetVehicleNumber() string {
	if x != nil {
		return x.VehicleNumber
	}
	return ""
}

type Fare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DeliveryTime uint64  `protobuf:"varint,3,opt,name=delivery_time,json=deliveryTime,proto3" json:"delivery_time,omitempty"`
	PricePerKm   float32 `protobuf:"fixed32,4,opt,name=price_per_km,json=pricePerKm,proto3" json:"price_per_km,omitempty"`
	MinPrice     float32 `protobuf:"fixed32,5,opt,name=min_price,json=minPrice,proto3" json:"min_price,omitempty"`
	MinDistance  float32 `protobuf:"fixed32,6,opt,name=min_distance,json=minDistance,proto3" json:"min_distance,omitempty"`
	IsActive     bool    `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	CreatedAt    string  `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    string  `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt    string  `protobuf:"bytes,10,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *Fare) Reset() {
	*x = Fare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fare) ProtoMessage() {}

func (x *Fare) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fare.ProtoReflect.Descriptor instead.
func (*Fare) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{3}
}

func (x *Fare) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Fare) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Fare) GetDeliveryTime() uint64 {
	if x != nil {
		return x.DeliveryTime
	}
	return 0
}

func (x *Fare) GetPricePerKm() float32 {
	if x != nil {
		return x.PricePerKm
	}
	return 0
}

func (x *Fare) GetMinPrice() float32 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *Fare) GetMinDistance() float32 {
	if x != nil {
		return x.MinDistance
	}
	return 0
}

func (x *Fare) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Fare) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Fare) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Fare) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime int64 `protobuf:"varint,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	State      int64 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{4}
}

func (x *Transaction) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Transaction) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientName        string                `protobuf:"bytes,2,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	ToLocation        *Location             `protobuf:"bytes,3,opt,name=to_location,json=toLocation,proto3" json:"to_location,omitempty"`
	ToAddress         string                `protobuf:"bytes,4,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	CourierId         *wrappers.StringValue `protobuf:"bytes,5,opt,name=courier_id,json=courierId,proto3" json:"courier_id,omitempty"`
	FareId            string                `protobuf:"bytes,6,opt,name=fare_id,json=fareId,proto3" json:"fare_id,omitempty"`
	StatusId          string                `protobuf:"bytes,7,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	CreatedAt         string                `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Description       string                `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	ShipperId         string                `protobuf:"bytes,10,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
	CreatorTypeId     string                `protobuf:"bytes,11,opt,name=creator_type_id,json=creatorTypeId,proto3" json:"creator_type_id,omitempty"`
	SystemUserId      *wrappers.StringValue `protobuf:"bytes,12,opt,name=system_user_id,json=systemUserId,proto3" json:"system_user_id,omitempty"`
	Steps             []*Step               `protobuf:"bytes,13,rep,name=steps,proto3" json:"steps,omitempty"`
	Fare              *Fare                 `protobuf:"bytes,14,opt,name=fare,proto3" json:"fare,omitempty"`
	CoDeliveryPrice   float32               `protobuf:"fixed32,15,opt,name=co_delivery_price,json=coDeliveryPrice,proto3" json:"co_delivery_price,omitempty"`
	DeliveryPrice     float32               `protobuf:"fixed32,16,opt,name=delivery_price,json=deliveryPrice,proto3" json:"delivery_price,omitempty"`
	Courier           *Courier              `protobuf:"bytes,17,opt,name=courier,proto3" json:"courier,omitempty"`
	ClientPhoneNumber string                `protobuf:"bytes,18,opt,name=client_phone_number,json=clientPhoneNumber,proto3" json:"client_phone_number,omitempty"`
	FinishedAt        string                `protobuf:"bytes,19,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	OrderAmount       float32               `protobuf:"fixed32,20,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"`
	ExternalOrderId   uint64                `protobuf:"varint,21,opt,name=external_order_id,json=externalOrderId,proto3" json:"external_order_id,omitempty"`
	ClientId          string                `protobuf:"bytes,22,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	PaymentType       string                `protobuf:"bytes,23,opt,name=payment_type,json=paymentType,proto3" json:"payment_type,omitempty"`
	Source            string                `protobuf:"bytes,24,opt,name=source,proto3" json:"source,omitempty"`
	Apartment         *wrappers.StringValue `protobuf:"bytes,25,opt,name=apartment,proto3" json:"apartment,omitempty"`
	Building          *wrappers.StringValue `protobuf:"bytes,26,opt,name=building,proto3" json:"building,omitempty"`
	Floor             *wrappers.StringValue `protobuf:"bytes,27,opt,name=floor,proto3" json:"floor,omitempty"`
	ExtraPhoneNumber  *wrappers.StringValue `protobuf:"bytes,28,opt,name=extra_phone_number,json=extraPhoneNumber,proto3" json:"extra_phone_number,omitempty"`
	StatusNotes       []*StatusNote         `protobuf:"bytes,29,rep,name=status_notes,json=statusNotes,proto3" json:"status_notes,omitempty"`
	DeliveryTime      *wrappers.StringValue `protobuf:"bytes,30,opt,name=delivery_time,json=deliveryTime,proto3" json:"delivery_time,omitempty"`
	Paid              bool                  `protobuf:"varint,31,opt,name=paid,proto3" json:"paid,omitempty"`
	Rating            *wrappers.Int64Value  `protobuf:"bytes,32,opt,name=rating,proto3" json:"rating,omitempty"`
	Review            *wrappers.StringValue `protobuf:"bytes,33,opt,name=review,proto3" json:"review,omitempty"`
	DeliveryType      string                `protobuf:"bytes,34,opt,name=delivery_type,json=deliveryType,proto3" json:"delivery_type,omitempty"`
	Transactions      []*Transaction        `protobuf:"bytes,35,rep,name=transactions,proto3" json:"transactions,omitempty"`
	ShipperUser       *ShipperUser          `protobuf:"bytes,36,opt,name=shipper_user,json=shipperUser,proto3" json:"shipper_user,omitempty"`
	JowiId            *wrappers.StringValue `protobuf:"bytes,37,opt,name=jowi_id,json=jowiId,proto3" json:"jowi_id,omitempty"`
	IikoId            *wrappers.StringValue `protobuf:"bytes,38,opt,name=iiko_id,json=iikoId,proto3" json:"iiko_id,omitempty"`
	Distance          *wrappers.FloatValue  `protobuf:"bytes,39,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{5}
}

func (x *Order) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Order) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *Order) GetToLocation() *Location {
	if x != nil {
		return x.ToLocation
	}
	return nil
}

func (x *Order) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *Order) GetCourierId() *wrappers.StringValue {
	if x != nil {
		return x.CourierId
	}
	return nil
}

func (x *Order) GetFareId() string {
	if x != nil {
		return x.FareId
	}
	return ""
}

func (x *Order) GetStatusId() string {
	if x != nil {
		return x.StatusId
	}
	return ""
}

func (x *Order) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Order) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Order) GetShipperId() string {
	if x != nil {
		return x.ShipperId
	}
	return ""
}

func (x *Order) GetCreatorTypeId() string {
	if x != nil {
		return x.CreatorTypeId
	}
	return ""
}

func (x *Order) GetSystemUserId() *wrappers.StringValue {
	if x != nil {
		return x.SystemUserId
	}
	return nil
}

func (x *Order) GetSteps() []*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Order) GetFare() *Fare {
	if x != nil {
		return x.Fare
	}
	return nil
}

func (x *Order) GetCoDeliveryPrice() float32 {
	if x != nil {
		return x.CoDeliveryPrice
	}
	return 0
}

func (x *Order) GetDeliveryPrice() float32 {
	if x != nil {
		return x.DeliveryPrice
	}
	return 0
}

func (x *Order) GetCourier() *Courier {
	if x != nil {
		return x.Courier
	}
	return nil
}

func (x *Order) GetClientPhoneNumber() string {
	if x != nil {
		return x.ClientPhoneNumber
	}
	return ""
}

func (x *Order) GetFinishedAt() string {
	if x != nil {
		return x.FinishedAt
	}
	return ""
}

func (x *Order) GetOrderAmount() float32 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *Order) GetExternalOrderId() uint64 {
	if x != nil {
		return x.ExternalOrderId
	}
	return 0
}

func (x *Order) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Order) GetPaymentType() string {
	if x != nil {
		return x.PaymentType
	}
	return ""
}

func (x *Order) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Order) GetApartment() *wrappers.StringValue {
	if x != nil {
		return x.Apartment
	}
	return nil
}

func (x *Order) GetBuilding() *wrappers.StringValue {
	if x != nil {
		return x.Building
	}
	return nil
}

func (x *Order) GetFloor() *wrappers.StringValue {
	if x != nil {
		return x.Floor
	}
	return nil
}

func (x *Order) GetExtraPhoneNumber() *wrappers.StringValue {
	if x != nil {
		return x.ExtraPhoneNumber
	}
	return nil
}

func (x *Order) GetStatusNotes() []*StatusNote {
	if x != nil {
		return x.StatusNotes
	}
	return nil
}

func (x *Order) GetDeliveryTime() *wrappers.StringValue {
	if x != nil {
		return x.DeliveryTime
	}
	return nil
}

func (x *Order) GetPaid() bool {
	if x != nil {
		return x.Paid
	}
	return false
}

func (x *Order) GetRating() *wrappers.Int64Value {
	if x != nil {
		return x.Rating
	}
	return nil
}

func (x *Order) GetReview() *wrappers.StringValue {
	if x != nil {
		return x.Review
	}
	return nil
}

func (x *Order) GetDeliveryType() string {
	if x != nil {
		return x.DeliveryType
	}
	return ""
}

func (x *Order) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *Order) GetShipperUser() *ShipperUser {
	if x != nil {
		return x.ShipperUser
	}
	return nil
}

func (x *Order) GetJowiId() *wrappers.StringValue {
	if x != nil {
		return x.JowiId
	}
	return nil
}

func (x *Order) GetIikoId() *wrappers.StringValue {
	if x != nil {
		return x.IikoId
	}
	return nil
}

func (x *Order) GetDistance() *wrappers.FloatValue {
	if x != nil {
		return x.Distance
	}
	return nil
}

type ShipperUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *ShipperUser) Reset() {
	*x = ShipperUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipperUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipperUser) ProtoMessage() {}

func (x *ShipperUser) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipperUser.ProtoReflect.Descriptor instead.
func (*ShipperUser) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{6}
}

func (x *ShipperUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShipperUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShipperUser) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BranchName         *wrappers.StringValue `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	Location           *Location             `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Address            *wrappers.StringValue `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	DestinationAddress *wrappers.StringValue `protobuf:"bytes,5,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	PhoneNumber        *wrappers.StringValue `protobuf:"bytes,6,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Products           []*Product            `protobuf:"bytes,7,rep,name=products,proto3" json:"products,omitempty"`
	Description        string                `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	OrderNo            uint64                `protobuf:"varint,9,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	Status             string                `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	StepAmount         float32               `protobuf:"fixed32,11,opt,name=step_amount,json=stepAmount,proto3" json:"step_amount,omitempty"`
	ExternalStepId     *wrappers.Int64Value  `protobuf:"bytes,12,opt,name=external_step_id,json=externalStepId,proto3" json:"external_step_id,omitempty"`
	BranchId           *wrappers.StringValue `protobuf:"bytes,13,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
}

func (x *Step) Reset() {
	*x = Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step) ProtoMessage() {}

func (x *Step) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step.ProtoReflect.Descriptor instead.
func (*Step) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{7}
}

func (x *Step) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Step) GetBranchName() *wrappers.StringValue {
	if x != nil {
		return x.BranchName
	}
	return nil
}

func (x *Step) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Step) GetAddress() *wrappers.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Step) GetDestinationAddress() *wrappers.StringValue {
	if x != nil {
		return x.DestinationAddress
	}
	return nil
}

func (x *Step) GetPhoneNumber() *wrappers.StringValue {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *Step) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *Step) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Step) GetOrderNo() uint64 {
	if x != nil {
		return x.OrderNo
	}
	return 0
}

func (x *Step) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Step) GetStepAmount() float32 {
	if x != nil {
		return x.StepAmount
	}
	return 0
}

func (x *Step) GetExternalStepId() *wrappers.Int64Value {
	if x != nil {
		return x.ExternalStepId
	}
	return nil
}

func (x *Step) GetBranchId() *wrappers.StringValue {
	if x != nil {
		return x.BranchId
	}
	return nil
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              *wrappers.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Quantity          float32               `protobuf:"fixed32,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price             float32               `protobuf:"fixed32,4,opt,name=price,proto3" json:"price,omitempty"`
	TotalAmount       float32               `protobuf:"fixed32,5,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	ProductId         *wrappers.StringValue `protobuf:"bytes,6,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ExternalProductId *wrappers.Int64Value  `protobuf:"bytes,7,opt,name=external_product_id,json=externalProductId,proto3" json:"external_product_id,omitempty"`
	Description       *wrappers.StringValue `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{8}
}

func (x *Product) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Product) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Product) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Product) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Product) GetTotalAmount() float32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *Product) GetProductId() *wrappers.StringValue {
	if x != nil {
		return x.ProductId
	}
	return nil
}

func (x *Product) GetExternalProductId() *wrappers.Int64Value {
	if x != nil {
		return x.ExternalProductId
	}
	return nil
}

func (x *Product) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

type CustomerAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location         *Location             `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Address          string                `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Apartment        *wrappers.StringValue `protobuf:"bytes,3,opt,name=apartment,proto3" json:"apartment,omitempty"`
	Building         *wrappers.StringValue `protobuf:"bytes,4,opt,name=building,proto3" json:"building,omitempty"`
	Floor            *wrappers.StringValue `protobuf:"bytes,5,opt,name=floor,proto3" json:"floor,omitempty"`
	ExtraPhoneNumber *wrappers.StringValue `protobuf:"bytes,6,opt,name=extra_phone_number,json=extraPhoneNumber,proto3" json:"extra_phone_number,omitempty"`
}

func (x *CustomerAddress) Reset() {
	*x = CustomerAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerAddress) ProtoMessage() {}

func (x *CustomerAddress) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerAddress.ProtoReflect.Descriptor instead.
func (*CustomerAddress) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{9}
}

func (x *CustomerAddress) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CustomerAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CustomerAddress) GetApartment() *wrappers.StringValue {
	if x != nil {
		return x.Apartment
	}
	return nil
}

func (x *CustomerAddress) GetBuilding() *wrappers.StringValue {
	if x != nil {
		return x.Building
	}
	return nil
}

func (x *CustomerAddress) GetFloor() *wrappers.StringValue {
	if x != nil {
		return x.Floor
	}
	return nil
}

func (x *CustomerAddress) GetExtraPhoneNumber() *wrappers.StringValue {
	if x != nil {
		return x.ExtraPhoneNumber
	}
	return nil
}

type ShipperReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TotalOrdersCount         uint64  `protobuf:"varint,2,opt,name=total_orders_count,json=totalOrdersCount,proto3" json:"total_orders_count,omitempty"`
	AdminPanelOrdersCount    uint64  `protobuf:"varint,3,opt,name=admin_panel_orders_count,json=adminPanelOrdersCount,proto3" json:"admin_panel_orders_count,omitempty"`
	AppOrdersCount           uint64  `protobuf:"varint,4,opt,name=app_orders_count,json=appOrdersCount,proto3" json:"app_orders_count,omitempty"`
	BotOrdersCount           uint64  `protobuf:"varint,5,opt,name=bot_orders_count,json=botOrdersCount,proto3" json:"bot_orders_count,omitempty"`
	WebsiteOrdersCount       uint64  `protobuf:"varint,6,opt,name=website_orders_count,json=websiteOrdersCount,proto3" json:"website_orders_count,omitempty"`
	TotalSum                 float32 `protobuf:"fixed32,7,opt,name=total_sum,json=totalSum,proto3" json:"total_sum,omitempty"`
	TotalSumCash             float32 `protobuf:"fixed32,8,opt,name=total_sum_cash,json=totalSumCash,proto3" json:"total_sum_cash,omitempty"`
	TotalSumClick            float32 `protobuf:"fixed32,9,opt,name=total_sum_click,json=totalSumClick,proto3" json:"total_sum_click,omitempty"`
	TotalSumPayme            float32 `protobuf:"fixed32,10,opt,name=total_sum_payme,json=totalSumPayme,proto3" json:"total_sum_payme,omitempty"`
	TotalDeliverySum         float32 `protobuf:"fixed32,11,opt,name=total_delivery_sum,json=totalDeliverySum,proto3" json:"total_delivery_sum,omitempty"`
	TotalSumPaymePaid        float32 `protobuf:"fixed32,12,opt,name=total_sum_payme_paid,json=totalSumPaymePaid,proto3" json:"total_sum_payme_paid,omitempty"`
	TotalSumClickPaid        float32 `protobuf:"fixed32,13,opt,name=total_sum_click_paid,json=totalSumClickPaid,proto3" json:"total_sum_click_paid,omitempty"`
	TotalCashDeliverySum     float32 `protobuf:"fixed32,14,opt,name=total_cash_delivery_sum,json=totalCashDeliverySum,proto3" json:"total_cash_delivery_sum,omitempty"`
	TotalClickDeliverySum    float32 `protobuf:"fixed32,15,opt,name=total_click_delivery_sum,json=totalClickDeliverySum,proto3" json:"total_click_delivery_sum,omitempty"`
	TotalPaymeDeliverySum    float32 `protobuf:"fixed32,16,opt,name=total_payme_delivery_sum,json=totalPaymeDeliverySum,proto3" json:"total_payme_delivery_sum,omitempty"`
	TotalSumTransfer         float32 `protobuf:"fixed32,17,opt,name=total_sum_transfer,json=totalSumTransfer,proto3" json:"total_sum_transfer,omitempty"`
	TotalTransferDeliverySum float32 `protobuf:"fixed32,18,opt,name=total_transfer_delivery_sum,json=totalTransferDeliverySum,proto3" json:"total_transfer_delivery_sum,omitempty"`
}

func (x *ShipperReport) Reset() {
	*x = ShipperReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipperReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipperReport) ProtoMessage() {}

func (x *ShipperReport) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipperReport.ProtoReflect.Descriptor instead.
func (*ShipperReport) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{10}
}

func (x *ShipperReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShipperReport) GetTotalOrdersCount() uint64 {
	if x != nil {
		return x.TotalOrdersCount
	}
	return 0
}

func (x *ShipperReport) GetAdminPanelOrdersCount() uint64 {
	if x != nil {
		return x.AdminPanelOrdersCount
	}
	return 0
}

func (x *ShipperReport) GetAppOrdersCount() uint64 {
	if x != nil {
		return x.AppOrdersCount
	}
	return 0
}

func (x *ShipperReport) GetBotOrdersCount() uint64 {
	if x != nil {
		return x.BotOrdersCount
	}
	return 0
}

func (x *ShipperReport) GetWebsiteOrdersCount() uint64 {
	if x != nil {
		return x.WebsiteOrdersCount
	}
	return 0
}

func (x *ShipperReport) GetTotalSum() float32 {
	if x != nil {
		return x.TotalSum
	}
	return 0
}

func (x *ShipperReport) GetTotalSumCash() float32 {
	if x != nil {
		return x.TotalSumCash
	}
	return 0
}

func (x *ShipperReport) GetTotalSumClick() float32 {
	if x != nil {
		return x.TotalSumClick
	}
	return 0
}

func (x *ShipperReport) GetTotalSumPayme() float32 {
	if x != nil {
		return x.TotalSumPayme
	}
	return 0
}

func (x *ShipperReport) GetTotalDeliverySum() float32 {
	if x != nil {
		return x.TotalDeliverySum
	}
	return 0
}

func (x *ShipperReport) GetTotalSumPaymePaid() float32 {
	if x != nil {
		return x.TotalSumPaymePaid
	}
	return 0
}

func (x *ShipperReport) GetTotalSumClickPaid() float32 {
	if x != nil {
		return x.TotalSumClickPaid
	}
	return 0
}

func (x *ShipperReport) GetTotalCashDeliverySum() float32 {
	if x != nil {
		return x.TotalCashDeliverySum
	}
	return 0
}

func (x *ShipperReport) GetTotalClickDeliverySum() float32 {
	if x != nil {
		return x.TotalClickDeliverySum
	}
	return 0
}

func (x *ShipperReport) GetTotalPaymeDeliverySum() float32 {
	if x != nil {
		return x.TotalPaymeDeliverySum
	}
	return 0
}

func (x *ShipperReport) GetTotalSumTransfer() float32 {
	if x != nil {
		return x.TotalSumTransfer
	}
	return 0
}

func (x *ShipperReport) GetTotalTransferDeliverySum() float32 {
	if x != nil {
		return x.TotalTransferDeliverySum
	}
	return 0
}

type OperatorReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TotalOrdersCount      uint64  `protobuf:"varint,2,opt,name=total_orders_count,json=totalOrdersCount,proto3" json:"total_orders_count,omitempty"`
	AdminPanelOrdersCount uint64  `protobuf:"varint,3,opt,name=admin_panel_orders_count,json=adminPanelOrdersCount,proto3" json:"admin_panel_orders_count,omitempty"`
	AppOrdersCount        uint64  `protobuf:"varint,4,opt,name=app_orders_count,json=appOrdersCount,proto3" json:"app_orders_count,omitempty"`
	BotOrdersCount        uint64  `protobuf:"varint,5,opt,name=bot_orders_count,json=botOrdersCount,proto3" json:"bot_orders_count,omitempty"`
	WebsiteOrdersCount    uint64  `protobuf:"varint,6,opt,name=website_orders_count,json=websiteOrdersCount,proto3" json:"website_orders_count,omitempty"`
	TotalSum              float32 `protobuf:"fixed32,7,opt,name=total_sum,json=totalSum,proto3" json:"total_sum,omitempty"`
	TotalSumCash          float32 `protobuf:"fixed32,8,opt,name=total_sum_cash,json=totalSumCash,proto3" json:"total_sum_cash,omitempty"`
	TotalSumClick         float32 `protobuf:"fixed32,9,opt,name=total_sum_click,json=totalSumClick,proto3" json:"total_sum_click,omitempty"`
	TotalSumPayme         float32 `protobuf:"fixed32,10,opt,name=total_sum_payme,json=totalSumPayme,proto3" json:"total_sum_payme,omitempty"`
	TotalDeliverySum      float32 `protobuf:"fixed32,11,opt,name=total_delivery_sum,json=totalDeliverySum,proto3" json:"total_delivery_sum,omitempty"`
}

func (x *OperatorReport) Reset() {
	*x = OperatorReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorReport) ProtoMessage() {}

func (x *OperatorReport) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorReport.ProtoReflect.Descriptor instead.
func (*OperatorReport) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{11}
}

func (x *OperatorReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OperatorReport) GetTotalOrdersCount() uint64 {
	if x != nil {
		return x.TotalOrdersCount
	}
	return 0
}

func (x *OperatorReport) GetAdminPanelOrdersCount() uint64 {
	if x != nil {
		return x.AdminPanelOrdersCount
	}
	return 0
}

func (x *OperatorReport) GetAppOrdersCount() uint64 {
	if x != nil {
		return x.AppOrdersCount
	}
	return 0
}

func (x *OperatorReport) GetBotOrdersCount() uint64 {
	if x != nil {
		return x.BotOrdersCount
	}
	return 0
}

func (x *OperatorReport) GetWebsiteOrdersCount() uint64 {
	if x != nil {
		return x.WebsiteOrdersCount
	}
	return 0
}

func (x *OperatorReport) GetTotalSum() float32 {
	if x != nil {
		return x.TotalSum
	}
	return 0
}

func (x *OperatorReport) GetTotalSumCash() float32 {
	if x != nil {
		return x.TotalSumCash
	}
	return 0
}

func (x *OperatorReport) GetTotalSumClick() float32 {
	if x != nil {
		return x.TotalSumClick
	}
	return 0
}

func (x *OperatorReport) GetTotalSumPayme() float32 {
	if x != nil {
		return x.TotalSumPayme
	}
	return 0
}

func (x *OperatorReport) GetTotalDeliverySum() float32 {
	if x != nil {
		return x.TotalDeliverySum
	}
	return 0
}

type BranchReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TotalOrdersCount         uint64  `protobuf:"varint,2,opt,name=total_orders_count,json=totalOrdersCount,proto3" json:"total_orders_count,omitempty"`
	AdminPanelOrdersCount    uint64  `protobuf:"varint,3,opt,name=admin_panel_orders_count,json=adminPanelOrdersCount,proto3" json:"admin_panel_orders_count,omitempty"`
	AppOrdersCount           uint64  `protobuf:"varint,4,opt,name=app_orders_count,json=appOrdersCount,proto3" json:"app_orders_count,omitempty"`
	BotOrdersCount           uint64  `protobuf:"varint,5,opt,name=bot_orders_count,json=botOrdersCount,proto3" json:"bot_orders_count,omitempty"`
	WebsiteOrdersCount       uint64  `protobuf:"varint,6,opt,name=website_orders_count,json=websiteOrdersCount,proto3" json:"website_orders_count,omitempty"`
	TotalSum                 float32 `protobuf:"fixed32,7,opt,name=total_sum,json=totalSum,proto3" json:"total_sum,omitempty"`
	TotalSumCash             float32 `protobuf:"fixed32,8,opt,name=total_sum_cash,json=totalSumCash,proto3" json:"total_sum_cash,omitempty"`
	TotalSumClick            float32 `protobuf:"fixed32,9,opt,name=total_sum_click,json=totalSumClick,proto3" json:"total_sum_click,omitempty"`
	TotalSumPayme            float32 `protobuf:"fixed32,10,opt,name=total_sum_payme,json=totalSumPayme,proto3" json:"total_sum_payme,omitempty"`
	TotalDeliverySum         float32 `protobuf:"fixed32,11,opt,name=total_delivery_sum,json=totalDeliverySum,proto3" json:"total_delivery_sum,omitempty"`
	Date                     string  `protobuf:"bytes,12,opt,name=date,proto3" json:"date,omitempty"`
	TotalSumPaymePaid        float32 `protobuf:"fixed32,13,opt,name=total_sum_payme_paid,json=totalSumPaymePaid,proto3" json:"total_sum_payme_paid,omitempty"`
	TotalSumClickPaid        float32 `protobuf:"fixed32,14,opt,name=total_sum_click_paid,json=totalSumClickPaid,proto3" json:"total_sum_click_paid,omitempty"`
	TotalCashDeliverySum     float32 `protobuf:"fixed32,15,opt,name=total_cash_delivery_sum,json=totalCashDeliverySum,proto3" json:"total_cash_delivery_sum,omitempty"`
	TotalClickDeliverySum    float32 `protobuf:"fixed32,16,opt,name=total_click_delivery_sum,json=totalClickDeliverySum,proto3" json:"total_click_delivery_sum,omitempty"`
	TotalPaymeDeliverySum    float32 `protobuf:"fixed32,17,opt,name=total_payme_delivery_sum,json=totalPaymeDeliverySum,proto3" json:"total_payme_delivery_sum,omitempty"`
	TotalSumTransfer         float32 `protobuf:"fixed32,18,opt,name=total_sum_transfer,json=totalSumTransfer,proto3" json:"total_sum_transfer,omitempty"`
	TotalTransferDeliverySum float32 `protobuf:"fixed32,19,opt,name=total_transfer_delivery_sum,json=totalTransferDeliverySum,proto3" json:"total_transfer_delivery_sum,omitempty"`
}

func (x *BranchReport) Reset() {
	*x = BranchReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchReport) ProtoMessage() {}

func (x *BranchReport) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchReport.ProtoReflect.Descriptor instead.
func (*BranchReport) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{12}
}

func (x *BranchReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchReport) GetTotalOrdersCount() uint64 {
	if x != nil {
		return x.TotalOrdersCount
	}
	return 0
}

func (x *BranchReport) GetAdminPanelOrdersCount() uint64 {
	if x != nil {
		return x.AdminPanelOrdersCount
	}
	return 0
}

func (x *BranchReport) GetAppOrdersCount() uint64 {
	if x != nil {
		return x.AppOrdersCount
	}
	return 0
}

func (x *BranchReport) GetBotOrdersCount() uint64 {
	if x != nil {
		return x.BotOrdersCount
	}
	return 0
}

func (x *BranchReport) GetWebsiteOrdersCount() uint64 {
	if x != nil {
		return x.WebsiteOrdersCount
	}
	return 0
}

func (x *BranchReport) GetTotalSum() float32 {
	if x != nil {
		return x.TotalSum
	}
	return 0
}

func (x *BranchReport) GetTotalSumCash() float32 {
	if x != nil {
		return x.TotalSumCash
	}
	return 0
}

func (x *BranchReport) GetTotalSumClick() float32 {
	if x != nil {
		return x.TotalSumClick
	}
	return 0
}

func (x *BranchReport) GetTotalSumPayme() float32 {
	if x != nil {
		return x.TotalSumPayme
	}
	return 0
}

func (x *BranchReport) GetTotalDeliverySum() float32 {
	if x != nil {
		return x.TotalDeliverySum
	}
	return 0
}

func (x *BranchReport) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *BranchReport) GetTotalSumPaymePaid() float32 {
	if x != nil {
		return x.TotalSumPaymePaid
	}
	return 0
}

func (x *BranchReport) GetTotalSumClickPaid() float32 {
	if x != nil {
		return x.TotalSumClickPaid
	}
	return 0
}

func (x *BranchReport) GetTotalCashDeliverySum() float32 {
	if x != nil {
		return x.TotalCashDeliverySum
	}
	return 0
}

func (x *BranchReport) GetTotalClickDeliverySum() float32 {
	if x != nil {
		return x.TotalClickDeliverySum
	}
	return 0
}

func (x *BranchReport) GetTotalPaymeDeliverySum() float32 {
	if x != nil {
		return x.TotalPaymeDeliverySum
	}
	return 0
}

func (x *BranchReport) GetTotalSumTransfer() float32 {
	if x != nil {
		return x.TotalSumTransfer
	}
	return 0
}

func (x *BranchReport) GetTotalTransferDeliverySum() float32 {
	if x != nil {
		return x.TotalTransferDeliverySum
	}
	return 0
}

type ProductReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName        string  `protobuf:"bytes,1,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	TotalProductsCount uint64  `protobuf:"varint,2,opt,name=total_products_count,json=totalProductsCount,proto3" json:"total_products_count,omitempty"`
	TotalSum           float32 `protobuf:"fixed32,3,opt,name=total_sum,json=totalSum,proto3" json:"total_sum,omitempty"`
}

func (x *ProductReport) Reset() {
	*x = ProductReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductReport) ProtoMessage() {}

func (x *ProductReport) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductReport.ProtoReflect.Descriptor instead.
func (*ProductReport) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{13}
}

func (x *ProductReport) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ProductReport) GetTotalProductsCount() uint64 {
	if x != nil {
		return x.TotalProductsCount
	}
	return 0
}

func (x *ProductReport) GetTotalSum() float32 {
	if x != nil {
		return x.TotalSum
	}
	return 0
}

type CourierReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourierName           string  `protobuf:"bytes,1,opt,name=courier_name,json=courierName,proto3" json:"courier_name,omitempty"`
	TotalOrdersCount      uint64  `protobuf:"varint,2,opt,name=total_orders_count,json=totalOrdersCount,proto3" json:"total_orders_count,omitempty"`
	TotalSum              float32 `protobuf:"fixed32,3,opt,name=total_sum,json=totalSum,proto3" json:"total_sum,omitempty"`
	TotalSumCash          float32 `protobuf:"fixed32,4,opt,name=total_sum_cash,json=totalSumCash,proto3" json:"total_sum_cash,omitempty"`
	TotalSumClick         float32 `protobuf:"fixed32,5,opt,name=total_sum_click,json=totalSumClick,proto3" json:"total_sum_click,omitempty"`
	TotalSumPayme         float32 `protobuf:"fixed32,6,opt,name=total_sum_payme,json=totalSumPayme,proto3" json:"total_sum_payme,omitempty"`
	TotalDeliverySum      float32 `protobuf:"fixed32,7,opt,name=total_delivery_sum,json=totalDeliverySum,proto3" json:"total_delivery_sum,omitempty"`
	TotalCashDeliverySum  float32 `protobuf:"fixed32,8,opt,name=total_cash_delivery_sum,json=totalCashDeliverySum,proto3" json:"total_cash_delivery_sum,omitempty"`
	TotalClickDeliverySum float32 `protobuf:"fixed32,9,opt,name=total_click_delivery_sum,json=totalClickDeliverySum,proto3" json:"total_click_delivery_sum,omitempty"`
	TotalPaymeDeliverySum float32 `protobuf:"fixed32,10,opt,name=total_payme_delivery_sum,json=totalPaymeDeliverySum,proto3" json:"total_payme_delivery_sum,omitempty"`
	Date                  string  `protobuf:"bytes,11,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *CourierReport) Reset() {
	*x = CourierReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourierReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourierReport) ProtoMessage() {}

func (x *CourierReport) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourierReport.ProtoReflect.Descriptor instead.
func (*CourierReport) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{14}
}

func (x *CourierReport) GetCourierName() string {
	if x != nil {
		return x.CourierName
	}
	return ""
}

func (x *CourierReport) GetTotalOrdersCount() uint64 {
	if x != nil {
		return x.TotalOrdersCount
	}
	return 0
}

func (x *CourierReport) GetTotalSum() float32 {
	if x != nil {
		return x.TotalSum
	}
	return 0
}

func (x *CourierReport) GetTotalSumCash() float32 {
	if x != nil {
		return x.TotalSumCash
	}
	return 0
}

func (x *CourierReport) GetTotalSumClick() float32 {
	if x != nil {
		return x.TotalSumClick
	}
	return 0
}

func (x *CourierReport) GetTotalSumPayme() float32 {
	if x != nil {
		return x.TotalSumPayme
	}
	return 0
}

func (x *CourierReport) GetTotalDeliverySum() float32 {
	if x != nil {
		return x.TotalDeliverySum
	}
	return 0
}

func (x *CourierReport) GetTotalCashDeliverySum() float32 {
	if x != nil {
		return x.TotalCashDeliverySum
	}
	return 0
}

func (x *CourierReport) GetTotalClickDeliverySum() float32 {
	if x != nil {
		return x.TotalClickDeliverySum
	}
	return 0
}

func (x *CourierReport) GetTotalPaymeDeliverySum() float32 {
	if x != nil {
		return x.TotalPaymeDeliverySum
	}
	return 0
}

func (x *CourierReport) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type MonthlyOrdersReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day         uint32 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
	OrdersCount uint32 `protobuf:"varint,2,opt,name=orders_count,json=ordersCount,proto3" json:"orders_count,omitempty"`
}

func (x *MonthlyOrdersReport) Reset() {
	*x = MonthlyOrdersReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlyOrdersReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyOrdersReport) ProtoMessage() {}

func (x *MonthlyOrdersReport) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyOrdersReport.ProtoReflect.Descriptor instead.
func (*MonthlyOrdersReport) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{15}
}

func (x *MonthlyOrdersReport) GetDay() uint32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *MonthlyOrdersReport) GetOrdersCount() uint32 {
	if x != nil {
		return x.OrdersCount
	}
	return 0
}

type YearlyOrdersReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month       uint32 `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	OrdersCount uint32 `protobuf:"varint,2,opt,name=orders_count,json=ordersCount,proto3" json:"orders_count,omitempty"`
}

func (x *YearlyOrdersReport) Reset() {
	*x = YearlyOrdersReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YearlyOrdersReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YearlyOrdersReport) ProtoMessage() {}

func (x *YearlyOrdersReport) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YearlyOrdersReport.ProtoReflect.Descriptor instead.
func (*YearlyOrdersReport) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{16}
}

func (x *YearlyOrdersReport) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *YearlyOrdersReport) GetOrdersCount() uint32 {
	if x != nil {
		return x.OrdersCount
	}
	return 0
}

type StatusTimeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalTimeAvg         string `protobuf:"bytes,1,opt,name=total_time_avg,json=totalTimeAvg,proto3" json:"total_time_avg,omitempty"`
	OperatorAcceptingAvg string `protobuf:"bytes,2,opt,name=operator_accepting_avg,json=operatorAcceptingAvg,proto3" json:"operator_accepting_avg,omitempty"`
	VendorPreparingAvg   string `protobuf:"bytes,3,opt,name=vendor_preparing_avg,json=vendorPreparingAvg,proto3" json:"vendor_preparing_avg,omitempty"`
	CourierPickingAvg    string `protobuf:"bytes,4,opt,name=courier_picking_avg,json=courierPickingAvg,proto3" json:"courier_picking_avg,omitempty"`
	DeliveringTimeAvg    string `protobuf:"bytes,5,opt,name=delivering_time_avg,json=deliveringTimeAvg,proto3" json:"delivering_time_avg,omitempty"`
}

func (x *StatusTimeReport) Reset() {
	*x = StatusTimeReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusTimeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusTimeReport) ProtoMessage() {}

func (x *StatusTimeReport) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusTimeReport.ProtoReflect.Descriptor instead.
func (*StatusTimeReport) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{17}
}

func (x *StatusTimeReport) GetTotalTimeAvg() string {
	if x != nil {
		return x.TotalTimeAvg
	}
	return ""
}

func (x *StatusTimeReport) GetOperatorAcceptingAvg() string {
	if x != nil {
		return x.OperatorAcceptingAvg
	}
	return ""
}

func (x *StatusTimeReport) GetVendorPreparingAvg() string {
	if x != nil {
		return x.VendorPreparingAvg
	}
	return ""
}

func (x *StatusTimeReport) GetCourierPickingAvg() string {
	if x != nil {
		return x.CourierPickingAvg
	}
	return ""
}

func (x *StatusTimeReport) GetDeliveringTimeAvg() string {
	if x != nil {
		return x.DeliveringTimeAvg
	}
	return ""
}

var File_order_proto protoreflect.FileDescriptor

var file_order_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64,
	0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x92, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xab, 0x02, 0x0a, 0x04, 0x46, 0x61, 0x72, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x6b, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x69, 0x6e,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x44, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xbf, 0x0d, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x6f,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x69,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x69,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x04,
	0x66, 0x61, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x72, 0x65, 0x52, 0x04, 0x66, 0x61, 0x72, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x6f, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x32,
	0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x12, 0x33,
	0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x23,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x6a, 0x6f, 0x77, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x6a, 0x6f, 0x77, 0x69, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x69, 0x69,
	0x6b, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x69, 0x69, 0x6b, 0x6f, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x47, 0x0a, 0x0b, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x22, 0xf4, 0x04, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0b,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x65, 0x70, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x74,
	0x65, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x22, 0xea, 0x02, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x13, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x02, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12,
	0x4a, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc9, 0x06, 0x0a, 0x0d,
	0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x18, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x6f,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x43, 0x61, 0x73,
	0x68, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x75, 0x6d, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12,
	0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x50, 0x61, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x50, 0x61, 0x69,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75,
	0x6d, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x22, 0xd2, 0x03, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x61, 0x70, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x43, 0x61, 0x73, 0x68, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75,
	0x6d, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x22, 0xdc, 0x06, 0x0a,
	0x0c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x18, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x6f,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x43, 0x61, 0x73,
	0x68, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x75, 0x6d, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x50, 0x61, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75,
	0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x50, 0x61, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x61, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x73,
	0x68, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75,
	0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x22, 0x81, 0x01, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x22,
	0xde, 0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x12,
	0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75,
	0x6d, 0x43, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x53, 0x75, 0x6d, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x73,
	0x68, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x53, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x22, 0x4a, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x12,
	0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x10,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61,
	0x76, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x41, 0x76, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x67, 0x12, 0x30, 0x0a, 0x14,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x76, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x67, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75,
	0x72, 0x69, 0x65, 0x72, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x67, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x76, 0x67, 0x42, 0x18,
	0x5a, 0x16, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_order_proto_rawDescOnce sync.Once
	file_order_proto_rawDescData = file_order_proto_rawDesc
)

func file_order_proto_rawDescGZIP() []byte {
	file_order_proto_rawDescOnce.Do(func() {
		file_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_order_proto_rawDescData)
	})
	return file_order_proto_rawDescData
}

var file_order_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_order_proto_goTypes = []interface{}{
	(*Location)(nil),             // 0: genproto.Location
	(*StatusNote)(nil),           // 1: genproto.StatusNote
	(*Courier)(nil),              // 2: genproto.Courier
	(*Fare)(nil),                 // 3: genproto.Fare
	(*Transaction)(nil),          // 4: genproto.Transaction
	(*Order)(nil),                // 5: genproto.Order
	(*ShipperUser)(nil),          // 6: genproto.ShipperUser
	(*Step)(nil),                 // 7: genproto.Step
	(*Product)(nil),              // 8: genproto.Product
	(*CustomerAddress)(nil),      // 9: genproto.CustomerAddress
	(*ShipperReport)(nil),        // 10: genproto.ShipperReport
	(*OperatorReport)(nil),       // 11: genproto.OperatorReport
	(*BranchReport)(nil),         // 12: genproto.BranchReport
	(*ProductReport)(nil),        // 13: genproto.ProductReport
	(*CourierReport)(nil),        // 14: genproto.CourierReport
	(*MonthlyOrdersReport)(nil),  // 15: genproto.MonthlyOrdersReport
	(*YearlyOrdersReport)(nil),   // 16: genproto.YearlyOrdersReport
	(*StatusTimeReport)(nil),     // 17: genproto.StatusTimeReport
	(*wrappers.StringValue)(nil), // 18: google.protobuf.StringValue
	(*wrappers.Int64Value)(nil),  // 19: google.protobuf.Int64Value
	(*wrappers.FloatValue)(nil),  // 20: google.protobuf.FloatValue
}
var file_order_proto_depIdxs = []int32{
	18, // 0: genproto.StatusNote.description:type_name -> google.protobuf.StringValue
	0,  // 1: genproto.Order.to_location:type_name -> genproto.Location
	18, // 2: genproto.Order.courier_id:type_name -> google.protobuf.StringValue
	18, // 3: genproto.Order.system_user_id:type_name -> google.protobuf.StringValue
	7,  // 4: genproto.Order.steps:type_name -> genproto.Step
	3,  // 5: genproto.Order.fare:type_name -> genproto.Fare
	2,  // 6: genproto.Order.courier:type_name -> genproto.Courier
	18, // 7: genproto.Order.apartment:type_name -> google.protobuf.StringValue
	18, // 8: genproto.Order.building:type_name -> google.protobuf.StringValue
	18, // 9: genproto.Order.floor:type_name -> google.protobuf.StringValue
	18, // 10: genproto.Order.extra_phone_number:type_name -> google.protobuf.StringValue
	1,  // 11: genproto.Order.status_notes:type_name -> genproto.StatusNote
	18, // 12: genproto.Order.delivery_time:type_name -> google.protobuf.StringValue
	19, // 13: genproto.Order.rating:type_name -> google.protobuf.Int64Value
	18, // 14: genproto.Order.review:type_name -> google.protobuf.StringValue
	4,  // 15: genproto.Order.transactions:type_name -> genproto.Transaction
	6,  // 16: genproto.Order.shipper_user:type_name -> genproto.ShipperUser
	18, // 17: genproto.Order.jowi_id:type_name -> google.protobuf.StringValue
	18, // 18: genproto.Order.iiko_id:type_name -> google.protobuf.StringValue
	20, // 19: genproto.Order.distance:type_name -> google.protobuf.FloatValue
	18, // 20: genproto.Step.branch_name:type_name -> google.protobuf.StringValue
	0,  // 21: genproto.Step.location:type_name -> genproto.Location
	18, // 22: genproto.Step.address:type_name -> google.protobuf.StringValue
	18, // 23: genproto.Step.destination_address:type_name -> google.protobuf.StringValue
	18, // 24: genproto.Step.phone_number:type_name -> google.protobuf.StringValue
	8,  // 25: genproto.Step.products:type_name -> genproto.Product
	19, // 26: genproto.Step.external_step_id:type_name -> google.protobuf.Int64Value
	18, // 27: genproto.Step.branch_id:type_name -> google.protobuf.StringValue
	18, // 28: genproto.Product.name:type_name -> google.protobuf.StringValue
	18, // 29: genproto.Product.product_id:type_name -> google.protobuf.StringValue
	19, // 30: genproto.Product.external_product_id:type_name -> google.protobuf.Int64Value
	18, // 31: genproto.Product.description:type_name -> google.protobuf.StringValue
	0,  // 32: genproto.CustomerAddress.location:type_name -> genproto.Location
	18, // 33: genproto.CustomerAddress.apartment:type_name -> google.protobuf.StringValue
	18, // 34: genproto.CustomerAddress.building:type_name -> google.protobuf.StringValue
	18, // 35: genproto.CustomerAddress.floor:type_name -> google.protobuf.StringValue
	18, // 36: genproto.CustomerAddress.extra_phone_number:type_name -> google.protobuf.StringValue
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_order_proto_init() }
func file_order_proto_init() {
	if File_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Courier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipperUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipperReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourierReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlyOrdersReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YearlyOrdersReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusTimeReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_order_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_order_proto_goTypes,
		DependencyIndexes: file_order_proto_depIdxs,
		MessageInfos:      file_order_proto_msgTypes,
	}.Build()
	File_order_proto = out.File
	file_order_proto_rawDesc = nil
	file_order_proto_goTypes = nil
	file_order_proto_depIdxs = nil
}
