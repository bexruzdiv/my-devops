// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: telegram_log_service.proto

package consumer_service

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_telegram_log_service_proto protoreflect.FileDescriptor

var file_telegram_log_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x12,
	0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0xe5, 0x04, 0x0a, 0x12, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x6f, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x12, 0x1d, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x1a, 0x25, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x61, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x6f,
	0x67, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x6f, 0x67,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x1b, 0x5a, 0x19, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_telegram_log_service_proto_goTypes = []interface{}{
	(*TelegramLog)(nil),              // 0: consumer_service.TelegramLog
	(*TelegramLogRequest)(nil),       // 1: consumer_service.TelegramLogRequest
	(*TelegramLogUpdateRequest)(nil), // 2: consumer_service.TelegramLogUpdateRequest
	(*TelegramLogResponse)(nil),      // 3: consumer_service.TelegramLogResponse
	(*TelegramLogsResponse)(nil),     // 4: consumer_service.TelegramLogsResponse
	(*Empty)(nil),                    // 5: consumer_service.Empty
}
var file_telegram_log_service_proto_depIdxs = []int32{
	0, // 0: consumer_service.TelegramLogService.CreateTelegramLog:input_type -> consumer_service.TelegramLog
	1, // 1: consumer_service.TelegramLogService.GetTelegramLogByID:input_type -> consumer_service.TelegramLogRequest
	1, // 2: consumer_service.TelegramLogService.GetTelegramLogsByStatus:input_type -> consumer_service.TelegramLogRequest
	2, // 3: consumer_service.TelegramLogService.UpdateTelegramLogStatus:input_type -> consumer_service.TelegramLogUpdateRequest
	2, // 4: consumer_service.TelegramLogService.UpdateTelegramLog:input_type -> consumer_service.TelegramLogUpdateRequest
	1, // 5: consumer_service.TelegramLogService.DeleteTelegramLog:input_type -> consumer_service.TelegramLogRequest
	3, // 6: consumer_service.TelegramLogService.CreateTelegramLog:output_type -> consumer_service.TelegramLogResponse
	3, // 7: consumer_service.TelegramLogService.GetTelegramLogByID:output_type -> consumer_service.TelegramLogResponse
	4, // 8: consumer_service.TelegramLogService.GetTelegramLogsByStatus:output_type -> consumer_service.TelegramLogsResponse
	3, // 9: consumer_service.TelegramLogService.UpdateTelegramLogStatus:output_type -> consumer_service.TelegramLogResponse
	3, // 10: consumer_service.TelegramLogService.UpdateTelegramLog:output_type -> consumer_service.TelegramLogResponse
	5, // 11: consumer_service.TelegramLogService.DeleteTelegramLog:output_type -> consumer_service.Empty
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_telegram_log_service_proto_init() }
func file_telegram_log_service_proto_init() {
	if File_telegram_log_service_proto != nil {
		return
	}
	file_telegram_log_proto_init()
	file_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_telegram_log_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_telegram_log_service_proto_goTypes,
		DependencyIndexes: file_telegram_log_service_proto_depIdxs,
	}.Build()
	File_telegram_log_service_proto = out.File
	file_telegram_log_service_proto_rawDesc = nil
	file_telegram_log_service_proto_goTypes = nil
	file_telegram_log_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TelegramLogServiceClient is the client API for TelegramLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TelegramLogServiceClient interface {
	CreateTelegramLog(ctx context.Context, in *TelegramLog, opts ...grpc.CallOption) (*TelegramLogResponse, error)
	GetTelegramLogByID(ctx context.Context, in *TelegramLogRequest, opts ...grpc.CallOption) (*TelegramLogResponse, error)
	GetTelegramLogsByStatus(ctx context.Context, in *TelegramLogRequest, opts ...grpc.CallOption) (*TelegramLogsResponse, error)
	UpdateTelegramLogStatus(ctx context.Context, in *TelegramLogUpdateRequest, opts ...grpc.CallOption) (*TelegramLogResponse, error)
	UpdateTelegramLog(ctx context.Context, in *TelegramLogUpdateRequest, opts ...grpc.CallOption) (*TelegramLogResponse, error)
	DeleteTelegramLog(ctx context.Context, in *TelegramLogRequest, opts ...grpc.CallOption) (*Empty, error)
}

type telegramLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelegramLogServiceClient(cc grpc.ClientConnInterface) TelegramLogServiceClient {
	return &telegramLogServiceClient{cc}
}

func (c *telegramLogServiceClient) CreateTelegramLog(ctx context.Context, in *TelegramLog, opts ...grpc.CallOption) (*TelegramLogResponse, error) {
	out := new(TelegramLogResponse)
	err := c.cc.Invoke(ctx, "/consumer_service.TelegramLogService/CreateTelegramLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramLogServiceClient) GetTelegramLogByID(ctx context.Context, in *TelegramLogRequest, opts ...grpc.CallOption) (*TelegramLogResponse, error) {
	out := new(TelegramLogResponse)
	err := c.cc.Invoke(ctx, "/consumer_service.TelegramLogService/GetTelegramLogByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramLogServiceClient) GetTelegramLogsByStatus(ctx context.Context, in *TelegramLogRequest, opts ...grpc.CallOption) (*TelegramLogsResponse, error) {
	out := new(TelegramLogsResponse)
	err := c.cc.Invoke(ctx, "/consumer_service.TelegramLogService/GetTelegramLogsByStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramLogServiceClient) UpdateTelegramLogStatus(ctx context.Context, in *TelegramLogUpdateRequest, opts ...grpc.CallOption) (*TelegramLogResponse, error) {
	out := new(TelegramLogResponse)
	err := c.cc.Invoke(ctx, "/consumer_service.TelegramLogService/UpdateTelegramLogStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramLogServiceClient) UpdateTelegramLog(ctx context.Context, in *TelegramLogUpdateRequest, opts ...grpc.CallOption) (*TelegramLogResponse, error) {
	out := new(TelegramLogResponse)
	err := c.cc.Invoke(ctx, "/consumer_service.TelegramLogService/UpdateTelegramLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramLogServiceClient) DeleteTelegramLog(ctx context.Context, in *TelegramLogRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/consumer_service.TelegramLogService/DeleteTelegramLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelegramLogServiceServer is the server API for TelegramLogService service.
type TelegramLogServiceServer interface {
	CreateTelegramLog(context.Context, *TelegramLog) (*TelegramLogResponse, error)
	GetTelegramLogByID(context.Context, *TelegramLogRequest) (*TelegramLogResponse, error)
	GetTelegramLogsByStatus(context.Context, *TelegramLogRequest) (*TelegramLogsResponse, error)
	UpdateTelegramLogStatus(context.Context, *TelegramLogUpdateRequest) (*TelegramLogResponse, error)
	UpdateTelegramLog(context.Context, *TelegramLogUpdateRequest) (*TelegramLogResponse, error)
	DeleteTelegramLog(context.Context, *TelegramLogRequest) (*Empty, error)
}

// UnimplementedTelegramLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTelegramLogServiceServer struct {
}

func (*UnimplementedTelegramLogServiceServer) CreateTelegramLog(context.Context, *TelegramLog) (*TelegramLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTelegramLog not implemented")
}
func (*UnimplementedTelegramLogServiceServer) GetTelegramLogByID(context.Context, *TelegramLogRequest) (*TelegramLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelegramLogByID not implemented")
}
func (*UnimplementedTelegramLogServiceServer) GetTelegramLogsByStatus(context.Context, *TelegramLogRequest) (*TelegramLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelegramLogsByStatus not implemented")
}
func (*UnimplementedTelegramLogServiceServer) UpdateTelegramLogStatus(context.Context, *TelegramLogUpdateRequest) (*TelegramLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTelegramLogStatus not implemented")
}
func (*UnimplementedTelegramLogServiceServer) UpdateTelegramLog(context.Context, *TelegramLogUpdateRequest) (*TelegramLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTelegramLog not implemented")
}
func (*UnimplementedTelegramLogServiceServer) DeleteTelegramLog(context.Context, *TelegramLogRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTelegramLog not implemented")
}

func RegisterTelegramLogServiceServer(s *grpc.Server, srv TelegramLogServiceServer) {
	s.RegisterService(&_TelegramLogService_serviceDesc, srv)
}

func _TelegramLogService_CreateTelegramLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramLogServiceServer).CreateTelegramLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumer_service.TelegramLogService/CreateTelegramLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramLogServiceServer).CreateTelegramLog(ctx, req.(*TelegramLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramLogService_GetTelegramLogByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramLogServiceServer).GetTelegramLogByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumer_service.TelegramLogService/GetTelegramLogByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramLogServiceServer).GetTelegramLogByID(ctx, req.(*TelegramLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramLogService_GetTelegramLogsByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramLogServiceServer).GetTelegramLogsByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumer_service.TelegramLogService/GetTelegramLogsByStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramLogServiceServer).GetTelegramLogsByStatus(ctx, req.(*TelegramLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramLogService_UpdateTelegramLogStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramLogUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramLogServiceServer).UpdateTelegramLogStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumer_service.TelegramLogService/UpdateTelegramLogStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramLogServiceServer).UpdateTelegramLogStatus(ctx, req.(*TelegramLogUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramLogService_UpdateTelegramLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramLogUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramLogServiceServer).UpdateTelegramLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumer_service.TelegramLogService/UpdateTelegramLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramLogServiceServer).UpdateTelegramLog(ctx, req.(*TelegramLogUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramLogService_DeleteTelegramLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramLogServiceServer).DeleteTelegramLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumer_service.TelegramLogService/DeleteTelegramLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramLogServiceServer).DeleteTelegramLog(ctx, req.(*TelegramLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TelegramLogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "consumer_service.TelegramLogService",
	HandlerType: (*TelegramLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTelegramLog",
			Handler:    _TelegramLogService_CreateTelegramLog_Handler,
		},
		{
			MethodName: "GetTelegramLogByID",
			Handler:    _TelegramLogService_GetTelegramLogByID_Handler,
		},
		{
			MethodName: "GetTelegramLogsByStatus",
			Handler:    _TelegramLogService_GetTelegramLogsByStatus_Handler,
		},
		{
			MethodName: "UpdateTelegramLogStatus",
			Handler:    _TelegramLogService_UpdateTelegramLogStatus_Handler,
		},
		{
			MethodName: "UpdateTelegramLog",
			Handler:    _TelegramLogService_UpdateTelegramLog_Handler,
		},
		{
			MethodName: "DeleteTelegramLog",
			Handler:    _TelegramLogService_DeleteTelegramLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "telegram_log_service.proto",
}
