---
- name: install dependencies
  become: "{{ ansible_distribution != 'MacOSX' }}"
  package:
    name: "{{ oh_my_zsh_dependencies }}"
    state: present

- name: clone oh-my-zsh for users
  tags:
    # Suppress warning: [ANSIBLE0006] git used in place of git module
    # Git module doesn't allow us to set `core.autocrlf=input`.
    - skip_ansible_lint
  become: yes
  become_user: "{{ user.username }}"
  # core.autocrlf=input prevents https://github.com/robbyrussell/oh-my-zsh/issues/4402
  command: "git clone -c core.autocrlf=input --depth=1 https://github.com/robbyrussell/oh-my-zsh.git .oh-my-zsh"
  args:
    chdir: "~{{ user.username }}"
    creates: "~{{ user.username }}/.oh-my-zsh"
  with_items: "{{ zsh_users }}"
  when: "((user.oh_my_zsh | default({})).install | default(oh_my_zsh_install)) | bool"
  loop_control:
    loop_var: user
    label: "{{ user.username }}"

- name: set permissions of oh-my-zsh for users
  become: yes
  file:
    path: "~{{ user.username }}/.oh-my-zsh"
    # Prevent the cloned repository from having insecure permissions. Failing to do
    # so causes compinit() calls to fail with "command not found: compdef" errors
    # for users with insecure umasks (e.g., "002", allowing group writability).
    mode: "go-w"
    recurse: yes
  with_items: "{{ zsh_users }}"
  when: "((user.oh_my_zsh | default({})).install | default(oh_my_zsh_install)) | bool"
  loop_control:
    loop_var: user
    label: "{{ user.username }}"

- name: set default shell for users
  become: yes
  user:
    name: "{{ user.username }}"
    shell: /bin/zsh
  with_items: "{{ zsh_users }}"
  when: "((user.oh_my_zsh | default({})).install | default(oh_my_zsh_install)) | bool"
  loop_control:
    loop_var: user
    label: "{{ user.username }}"

- name: write .zshrc for users
  become: yes
  become_user: "{{ user.username }}"
  template:
    src: zshrc.j2
    dest: "~{{ user.username }}/.zshrc"
    backup: yes
    mode: "u=rw,go=r"
  with_items: "{{ zsh_users }}"
  when: "((user.oh_my_zsh | default({})).install | default(oh_my_zsh_install)) | bool"
  loop_control:
    loop_var: user
    label: "{{ user.username }}"

- name: change robbyrussell theme for users
  become: yes
  become_user: "{{ user.username }}"
  template:
    src: robbyrussell.zsh-theme.j2
    dest: "~{{ user.username }}/.oh-my-zsh/themes/robbyrussell.zsh-theme"
    mode: "u=rw,go=r"
  with_items: "{{ zsh_users }}"
  when: "((user.oh_my_zsh | default({})).install | default(oh_my_zsh_install)) | bool"
  loop_control:
    loop_var: user
    label: "{{ user.username }}"

- name: Plugin zsh-autosuggestions
  become: yes
  become_user: "{{ user.username }}"
  git:
    repo: https://github.com/zsh-users/zsh-autosuggestions.git
    dest: "/home/{{user.username}}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
  with_items: "{{ zsh_users }}"
  when: "((user.oh_my_zsh | default({})).install | default(oh_my_zsh_install)) | bool"
  loop_control:
    loop_var: user
    label: "{{ user.username }}"
  # shell: git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

- name: Plugin zsh-syntax-highlighting
  become: yes
  become_user: "{{ user.username }}"
  git:
    repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
    dest: "/home/{{user.username}}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
  with_items: "{{ zsh_users }}"
  when: "((user.oh_my_zsh | default({})).install | default(oh_my_zsh_install)) | bool"
  loop_control:
    loop_var: user
    label: "{{ user.username }}"
  # shell: git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
